package com.icube.bobChat.UI;

import com.icube.bobChat.Server.EchoClient;
import com.icube.bobChat.Server.ProcessResponse;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import de.leonhard.storage.Json;
import org.apache.commons.codec.digest.DigestUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Locale;

public class RegisterGUI {
    private JPasswordField passwordField1;
    private JTextField textField1;
    private JButton RegisterButton;
    private JButton backToLoginButton;
    private JLabel rvl;
    private JPanel p;
    private JFrame f = new JFrame("BoBChat");
    private String s;
    private String response;
    private String news;
    private EchoClient ec;
    private Json settings = new Json("settings", System.getProperty("user.home") + "\\BoBChat\\Data");
    private Logger l = LogManager.getRootLogger();

    public void createUI() {
        f.add(p);
        registerListeners();
        f.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        f.pack();
        f.setVisible(true);
    }

    private void registerListeners() {
        RegisterButton.addActionListener(e -> {
            try {
                if (ProcessResponse.s.toArray().length == 0) {
                    s = null;
                } else {
                    s = ProcessResponse.s.get(0);
                }
                try {
                    if (settings.get("serverIP") != null) {
                        ec = new EchoClient(settings.getString("serverIP"));
                    } else {
                        enterIPDialog eipd = new enterIPDialog();
                        eipd.done = false;
                        eipd.createUI(f);
                        while (eipd.done) {
                            ec = new EchoClient(settings.getString("serverIP"));
                            break;
                        }
                    }
                    ec.sendEcho("register:" + textField1.getText() + "/" + DigestUtils.sha256Hex(String.valueOf(passwordField1.getPassword())));
                } catch (Exception ex) {
                    rvl.setText("Internal error");
                }
                rvl.setText("Connecting to server...");
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException ex) {
                    throw new RuntimeException(ex);
                }
                news = ProcessResponse.s.get(0);
                if (!news.equals(s)) {
                    response = ProcessResponse.s.get(0);
                    identifyResponse();
                }
                f.repaint();
            } catch (Exception ex) {
                if (ex instanceof IndexOutOfBoundsException) {
                    rvl.setText("Cannot connect to server.");
                } else {
                    l.error("Exception in RegisterUI " + ex.getMessage());
                    for (StackTraceElement el : ex.getStackTrace()) {
                        l.error(el.toString());
                    }
                }
            }
        });
        backToLoginButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                LoginGUI ui = new LoginGUI();
                ui.createUI();
                f.setVisible(false);
            }
        });
    }

    private void identifyResponse() {
        switch (response) {
            case "INVALID_COMMAND":
                rvl.setText("Internal error");
                break;
            case "USER_ALREADY_EXISTS":
                rvl.setText("That username already exists");
                break;
            case "REGISTRATION_SUCCESS":
                rvl.setText("Registration successful");
                break;
        }
        f.repaint();
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        p = new JPanel();
        p.setLayout(new GridLayoutManager(7, 2, new Insets(0, 0, 0, 0), -1, -1));
        final JLabel label1 = new JLabel();
        Font label1Font = this.$$$getFont$$$("JetBrains Mono", -1, 16, label1.getFont());
        if (label1Font != null) label1.setFont(label1Font);
        label1.setText("Register");
        p.add(label1, new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        textField1 = new JTextField();
        p.add(textField1, new GridConstraints(3, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JLabel label2 = new JLabel();
        Font label2Font = this.$$$getFont$$$("JetBrains Mono", -1, 16, label2.getFont());
        if (label2Font != null) label2.setFont(label2Font);
        label2.setText("Username");
        p.add(label2, new GridConstraints(2, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label3 = new JLabel();
        Font label3Font = this.$$$getFont$$$("JetBrains Mono", -1, 16, label3.getFont());
        if (label3Font != null) label3.setFont(label3Font);
        label3.setText("Password");
        p.add(label3, new GridConstraints(4, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        RegisterButton = new JButton();
        Font RegisterButtonFont = this.$$$getFont$$$("JetBrains Mono", -1, 16, RegisterButton.getFont());
        if (RegisterButtonFont != null) RegisterButton.setFont(RegisterButtonFont);
        RegisterButton.setText("Register");
        p.add(RegisterButton, new GridConstraints(6, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 1, false));
        backToLoginButton = new JButton();
        backToLoginButton.setEnabled(true);
        Font backToLoginButtonFont = this.$$$getFont$$$("JetBrains Mono", -1, 16, backToLoginButton.getFont());
        if (backToLoginButtonFont != null) backToLoginButton.setFont(backToLoginButtonFont);
        backToLoginButton.setText("Back to login");
        p.add(backToLoginButton, new GridConstraints(6, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        passwordField1 = new JPasswordField();
        p.add(passwordField1, new GridConstraints(5, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        rvl = new JLabel();
        rvl.setEnabled(true);
        Font rvlFont = this.$$$getFont$$$("JetBrains Mono", -1, 16, rvl.getFont());
        if (rvlFont != null) rvl.setFont(rvlFont);
        rvl.setText("");
        p.add(rvl, new GridConstraints(1, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return p;
    }

}