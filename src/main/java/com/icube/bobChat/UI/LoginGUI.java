package com.icube.bobChat.UI;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Locale;

import com.icube.bobChat.Server.EchoClient;
import com.icube.bobChat.Server.ProcessResponse;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import de.leonhard.storage.Json;
import org.apache.commons.codec.digest.DigestUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

public class LoginGUI {
    private JButton loginButton;
    private JPanel p;
    private JPasswordField PasswordField;
    private JTextField textField1;
    private JButton registerHereButton;
    private JLabel loginLabel;
    private JLabel notRegistered;
    private JLabel PassLabel;
    private JLabel UserLabel;
    private JTextField IPtextField2;
    private JLabel ipLabel;
    private JLabel rvl;
    private String s;
    private String news;
    private String response = new String();
    private JFrame f = new JFrame("BoBChat");
    private EchoClient ec = null;
    private Json settings = new Json("settings", System.getProperty("user.home") + "\\BoBChat\\Data");
    private Logger l = LogManager.getRootLogger();

    public void createUI() {
        f.add(p);
        registerListeners();
        f.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        f.pack();
        f.setVisible(true);
    }

    private void registerListeners() {
        loginButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    s = ProcessResponse.lastMessage;
                    try {
                        ec = new EchoClient(IPtextField2.getText());
                        settings.set("serverIP", IPtextField2.getText());
                        //ec = new EchoClient(InetAddress.getLoopbackAddress().getHostAddress());
                        ec.sendEcho("login:" + textField1.getText() + "/" + DigestUtils.sha256Hex(String.valueOf(PasswordField.getPassword())));
                    } catch (Exception ex) {
                        rvl.setText("IP is invalid");
                    }
                    rvl.setText("Connecting to server...");
                    try {
                        Thread.sleep(1000);
                    } catch (InterruptedException ex) {
                        throw new RuntimeException(ex);
                    }
                    news = ProcessResponse.lastMessage;
                    if (!news.equals(s)) {
                        response = ProcessResponse.lastMessage;
                        identifyResponse();
                    }
                    f.repaint();
                } catch (Exception ex) {
                    if (ex instanceof IndexOutOfBoundsException) {
                        rvl.setText("Cannot connect to server.");
                    } else {
                        l.error("Exception in LoginUI " + ex.getMessage());
                        for (StackTraceElement el : ex.getStackTrace()) {
                            l.error(el.toString());
                        }
                    }
                }
            }
        });
        registerHereButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                RegisterGUI rgui = new RegisterGUI();
                rgui.createUI();
                f.setVisible(false);
            }
        });
    }

    private void identifyResponse() {
        switch (response) {
            case "INVALID_COMMAND":
                rvl.setText("Internal error");
                break;
            case "LOGIN_SUCCESSFUL":
                rvl.setText("Login successful");
                ChatUI ui = ChatUI.getInstance();
                ui.createUI();
                f.setVisible(false);
                break;
            case "WRONG_CREDENTIALS":
                rvl.setText("Wrong credentials");
                break;
        }
        f.repaint();
        settings.set("serverIP", IPtextField2.getText());
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        p = new JPanel();
        p.setLayout(new GridLayoutManager(10, 2, new Insets(0, 0, 0, 0), -1, -1));
        loginButton = new JButton();
        loginButton.setText("Login");
        p.add(loginButton, new GridConstraints(9, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        PasswordField = new JPasswordField();
        PasswordField.setText("");
        p.add(PasswordField, new GridConstraints(7, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        textField1 = new JTextField();
        p.add(textField1, new GridConstraints(5, 0, 1, 2, GridConstraints.ANCHOR_SOUTH, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        registerHereButton = new JButton();
        registerHereButton.setText("Register here");
        p.add(registerHereButton, new GridConstraints(9, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        loginLabel = new JLabel();
        Font loginLabelFont = this.$$$getFont$$$("JetBrains Mono", -1, 22, loginLabel.getFont());
        if (loginLabelFont != null) loginLabel.setFont(loginLabelFont);
        loginLabel.setText("Login into BoBChat");
        p.add(loginLabel, new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        UserLabel = new JLabel();
        Font UserLabelFont = this.$$$getFont$$$("JetBrains Mono", -1, 16, UserLabel.getFont());
        if (UserLabelFont != null) UserLabel.setFont(UserLabelFont);
        UserLabel.setText("Username");
        p.add(UserLabel, new GridConstraints(4, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        PassLabel = new JLabel();
        Font PassLabelFont = this.$$$getFont$$$("JetBrains Mono", -1, 16, PassLabel.getFont());
        if (PassLabelFont != null) PassLabel.setFont(PassLabelFont);
        PassLabel.setText("Password");
        p.add(PassLabel, new GridConstraints(6, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        notRegistered = new JLabel();
        Font notRegisteredFont = this.$$$getFont$$$("JetBrains Mono", -1, 14, notRegistered.getFont());
        if (notRegisteredFont != null) notRegistered.setFont(notRegisteredFont);
        notRegistered.setText("Not already registered?");
        p.add(notRegistered, new GridConstraints(8, 1, 1, 1, GridConstraints.ANCHOR_SOUTH, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        ipLabel = new JLabel();
        ipLabel.setEnabled(true);
        Font ipLabelFont = this.$$$getFont$$$("JetBrains Mono", -1, 16, ipLabel.getFont());
        if (ipLabelFont != null) ipLabel.setFont(ipLabelFont);
        ipLabel.setText("IP");
        p.add(ipLabel, new GridConstraints(2, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        IPtextField2 = new JTextField();
        p.add(IPtextField2, new GridConstraints(3, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        rvl = new JLabel();
        Font rvlFont = this.$$$getFont$$$("JetBrains Mono", -1, 16, rvl.getFont());
        if (rvlFont != null) rvl.setFont(rvlFont);
        rvl.setText("");
        p.add(rvl, new GridConstraints(1, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return p;
    }

}
